package utils

import (
	"encoding/hex"
	"testing"
)

func TestInitSm2(t *testing.T) {
	public, private := InitSm2("0ce2fa6e66521155f780573beb0e5f18d0aeea6b9a145f54e5c8c442efd15ecf", "fa332850bffd6e06cbbd6e29ac851fe12da302c74550c3d75e24db54a2a1fdd7", "0b15a775077e438bce6ebcb7b30c3e61d9909ee861568723661d4728ee701068")
	encByte, err := Encrypt(public, "test")
	if err != nil {
		t.Error(err)
	}
	t.Log("加密结果: ", hex.EncodeToString(encByte))
	msg, err := Decrypt(private, encByte)
	if err != nil {
		t.Error(err)
	}
	if msg != "test" {
		t.Fail()
	}
}

func TestDecrypt(t *testing.T) {
	_, private := InitSm2("0ce2fa6e66521155f780573beb0e5f18d0aeea6b9a145f54e5c8c442efd15ecf", "fa332850bffd6e06cbbd6e29ac851fe12da302c74550c3d75e24db54a2a1fdd7", "0b15a775077e438bce6ebcb7b30c3e61d9909ee861568723661d4728ee701068")
	msg := `04895e82099c681c648b5ed4ce3976dcc876b8cb312bc90d012e5246e24739f90388a16b42dad46511ee8e87d4e1b93614962cd091185afee179aa74b517432de6e43382b9967e9872d3d260a17951068637bde8a5b674479ece9492e35181d2f3d4c8ca084742d2ada1cd9a835eabb63d59426e4afd8732c7bf22b8b81ec4e47ceb3dc6865f6f373150f39b274f19655e3c2441499feb64d4aff9450202cb2df0fd89484b5584a17130b0aa2dd8d5cec746679b650d3a6568d7c203ca606d2b1788f467ec906c2e61e838ee5755637413b9fbd71643f8dda518faadc22944491bf3615b34353e20d86b96756e691eb17f240ec53c6c40ce57dedb46aefed5de964347467f339bab93ad01582142077c4c6468b2d39caa30f7d528c585352b44ec905914f3206e6ac6b83a638aaa110893a5d14a73ac5776e5eaa4847bd0097c9101c23135fee884ece243cb76fa012a123f8047195c842c31a28df6d8206193a6b601088d9906f169da943078512363ce62d72c45ec7f5bdaa00a210e6972f68f8ba2efa5050a729b6a5039eca3c0427e37bd908272010d77514548b08874dedb5296b379d0a969e280a88cc990b193a37f7c1311aca0e6b66f0eb761f7cc77be4651f794429a231a0f0443e349b657bf45a0b4feb359daf93f42502f432ff8e7d351c0258865e26b3f9d91c03c2a85b6ecbf9fecee2132c0947a4fd357888880f88a8c33816b6928250b295c6ea2de5270c0764ecb4815925c6cfa1321479c6b618bda891360b9bc40d17c372eff780715cc0427560d3d88ae4bab4bd2a3e0bc9625db133294e556a8c2a7d2a1eff0db6284e3b60cbcc1fb591b4519b4715876b28d8db95ab6ae09f5a2e6100d356bf4e650e02ef60cfd101c568d9f3a593a968bace7eb16476373bbf61614520a31595d65e9b68a4ad46cb8af8854b9dd4100549f2c4504e1c3015e86526b8a4b1f13b258ac78031a4384b6a3e1b26b7366e78d8790ec1e550a0a84df7ef68ffbe35b9e5c8625590c8ccd24ccc389ee02c73dc14e78ccb0974c6092c73e5260184a3d6c00a0db2917f1db08f83e0c77d16e148b6db911303125c57c713e38e1d3f78dfdfe50cc8021e44f4d93e79962994875459ec39c95520cce038ec81c1719aca7ea325d1b2ddb0461e6e34ad5d769f7350733d4ddabd7ba485430dda4043a66b281d4d8c36eea4959b8fa30373628a660d7778ab0d8550a470eb41cf8a2700ead44b4e9a2b807606a6d2f14c386ba76d393b7abd6dea666f68a9e655434d1d68f452fc4c0dccce6bc420d0e24990e2f21facad11820ec001821076b63b402c00bd627c57d0d8cc6c3eda3dc1ecba2aac3e2bfca370bc317d60116d532eb117b049a7c0693699a82653da20f706973dae0bfd8a2112f96993e52d8f7fdff4ef1fb30755052bd9c19a32bc092e9e57a189309f318410610ec68259b79ed3e533034908ca7a7118dcb14ac0495e5537ae14fee3a881d937bfd88395a11282991f37c79b73c8a4e751f4206b773b43098438b71dc88f84c8d271cb9a7e9ef5285009d7d948ac640312acb61d99f49d2a63c6ddc2d238c7711548611f61e0329bde33808be2fde6812a5b176f610fd5d20b3f1cd0fe1a1d41106b751d910366d67f8e87f8d5e2703b9eb84b165156388572a4a5439a892c96534816cf6ef4d4236f53b5d583570ddda307ff3679ec4da3c8b266d5a9e50139d1086c3122fb4aed799af69d8d363dbd13492521a25914e6ff86511a3f9a69cffd6a20999fec90f58587c185f4a6b7d78faa23fecbebd7ae5028c528bfb50490a7bc1f511dd6bbd022fb54e40ff1f6265f3e91b068a2d10bc47218551fa3eefdfc6fb5dc3b5931747bdb727a0bd8977e37d134f1323e5cab4eeafebe82423c7b4ff1a8048ae8065646564e476b61a11b8eb68aebba6737edf6de6e754e683287479f5cad6f5e2872c1cd6cfbebb72996b90d61a6a542eead5c7dbf22b77bdae65151a937a7493a5e8a520d2b349c4ad0becba9c0897f6cf058164e4dafa9aa4b5423b3c52d02f8148461e3a7fd47a74fe71740b895fe865e53b89649d95a0bbf7799b26b99a32e61304cbd5f144c97a9b3b219e690b9dc765a13d0638b85528937b0e87e3e833ce3b262b8bbb95031013ae25c7aa`
	hex_byte, err := hex.DecodeString(msg)
	if err != nil {
		t.Error(err)
	}

	decMsg, err := Decrypt(private, hex_byte)
	if err != nil {
		t.Error(err)
	}

	t.Log(decMsg)
}

func TestENcrypt(t *testing.T) {
	public, _ := InitSm2("0ce2fa6e66521155f780573beb0e5f18d0aeea6b9a145f54e5c8c442efd15ecf", "fa332850bffd6e06cbbd6e29ac851fe12da302c74550c3d75e24db54a2a1fdd7", "0b15a775077e438bce6ebcb7b30c3e61d9909ee861568723661d4728ee701068")
	msg := "test"

	encMsg, err := Encrypt(public, msg)
	if err != nil {
		t.Error(err)
	}

	t.Log(hex.EncodeToString(encMsg))
}

func TestMock(t *testing.T) {
	keys := "[\"144\",\"C402022072640\"]"
	content := "{\"notaryOfficeId\":40,\"serviceType\":3,\"notarizationNumber\":\"KFGZS003\",\"payTime\":\"2021-01-12 10:17:07\"}"

	public, _ := InitSm2("0ce2fa6e66521155f780573beb0e5f18d0aeea6b9a145f54e5c8c442efd15ecf", "fa332850bffd6e06cbbd6e29ac851fe12da302c74550c3d75e24db54a2a1fdd7", "0b15a775077e438bce6ebcb7b30c3e61d9909ee861568723661d4728ee701068")

	encKeys, err := Encrypt(public, keys)
	if err != nil {
		t.Error(err)
	}

	encContent, err := Encrypt(public, content)
	if err != nil {
		t.Error(err)
	}

	t.Log("keys: ", hex.EncodeToString(encKeys))
	t.Log("content: ", hex.EncodeToString(encContent))
}
